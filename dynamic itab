
      DATA:
    ls_cob_pro        TYPE rsd_s_cob_pro,
    lt_components     TYPE abap_component_tab,
    ls_component      TYPE abap_componentdescr,
    lv_end_of_data    TYPE rs_bool,
    lv_msg          TYPE char50,

    lr_read_cube      TYPE REF TO cl_rsdri_infoprov,
    lr_data_tmp       TYPE REF TO data,
    lr_struct_descr   TYPE REF TO cl_abap_structdescr,
    lr_table_descr    TYPE REF TO cl_abap_tabledescr.

    FIELD-SYMBOLS:
                   <fs_component>   TYPE  abap_componentdescr,
                   <zfm_tabl_spsa>  TYPE  LINE OF ty_zfms_tabl_spsa,
                   <lo_data_tmp>    TYPE STANDARD TABLE,
                   <o_data>         TYPE STANDARD TABLE,
                   <field>          TYPE  any.
                   
    " liefert die Informationen zum InfoObjekt.
    ls_cob_pro =  me->info_io( iv_infoobject = <zfm_tabl_spsa>-chanm ).

    " erstellt eine Struktur mit InfoObjekt und Datentyp.
    ls_component-name   = ls_cob_pro-fieldnm.
    ls_component-type   ?= cl_abap_elemdescr=>describe_by_name( ls_cob_pro-dtelnm ).
    INSERT ls_component INTO TABLE lt_components.
    
    " einen Typ auf der oben definierten Struktur lt_compnents erstellen.
    lr_struct_descr ?= cl_abap_structdescr=>create( p_components = lt_components ).

    " eine interne Tabelle auf der Basis des generierten Typ beschreiben.
    lr_table_descr ?= cl_abap_tabledescr=>create( p_line_type  = lr_struct_descr ).

    " Die Referenz pr_data (Attribut) auf Basis des neuen Typ erstellen.
    " Auf die Referenz (Daten) pr_data wird auch aus der Subklasse zugegriffen daher wird dies als Attribut erstellt.
    CREATE DATA me->pr_data   TYPE HANDLE lr_table_descr.

    " Die Referenz zu der internen Tabelle verknÃ¼pfen
    ASSIGN pr_data->*     TO <o_data>.
    
    
    
